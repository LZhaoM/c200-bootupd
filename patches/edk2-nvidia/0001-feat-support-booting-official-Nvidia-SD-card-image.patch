From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ZHANG Yuntian <yt@radxa.com>
Date: Wed, 11 Jun 2025 15:59:52 +0800
Subject: [PATCH] feat: support booting official Nvidia SD card image

Signed-off-by: ZHANG Yuntian <yt@radxa.com>
---
 .../Drivers/TegraPlatformBootManager/Ext4Dxe  |   1 +
 .../TegraPlatformBootManagerDxe.c             | 132 ++++++++++++++++++
 .../TegraPlatformBootManagerDxe.inf           |   4 +
 3 files changed, 137 insertions(+)
 create mode 120000 Silicon/NVIDIA/Drivers/TegraPlatformBootManager/Ext4Dxe

diff --git a/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/Ext4Dxe b/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/Ext4Dxe
new file mode 120000
index 00000000..c8228935
--- /dev/null
+++ b/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/Ext4Dxe
@@ -0,0 +1 @@
+../../../../../edk2-platforms/Features/Ext4Pkg/Ext4Dxe/
\ No newline at end of file
diff --git a/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/TegraPlatformBootManagerDxe.c b/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/TegraPlatformBootManagerDxe.c
index aebc3622..aa63efa3 100644
--- a/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/TegraPlatformBootManagerDxe.c
+++ b/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/TegraPlatformBootManagerDxe.c
@@ -21,9 +21,12 @@
 #include <Protocol/PciIo.h>
 #include <Protocol/KernelCmdLineUpdate.h>
 #include <Protocol/AndroidBootImg.h>
+#include <Protocol/PartitionInfo.h>
 
 #include <NVIDIAConfiguration.h>
 
+#include "Ext4Dxe/Ext4Dxe.h"
+
 #define NVIDIA_KERNEL_COMMAND_MAX_LEN  25
 
 extern EFI_GUID  mBmAutoCreateBootOptionGuid;
@@ -498,6 +501,10 @@ UpdateKernelCommandLine (
     }
   }
 
+  // We will remove "root=/dev/mmcblk",
+  // so there is enough space for our custom root argument
+  Length += StrSize(L"root=UUID=00000000-0000-0000-0000-000000000000");
+
   Status = gBS->AllocatePool (
                   EfiBootServicesData,
                   Length,
@@ -550,6 +557,131 @@ UpdateKernelCommandLine (
     }
   }
 
+  if (StrStr (CmdLine, L"root=/dev/mmcblk") != NULL) {
+    ErrorPrint (L"%a: Found invalid mmcblk rootfs argument.\r\n", __FUNCTION__);
+    ErrorPrint (L"%a: Are you using Nvidia microSD system image?\r\n", __FUNCTION__);
+
+    EFI_HANDLE                  *HandleList     = NULL;
+    UINTN                       HandleCount     = 0;
+    UINTN                       i               = 0;
+    EFI_PARTITION_INFO_PROTOCOL *PartitionInfo  = NULL;
+    EXT4_PARTITION              Part            = {};
+
+    Status = gBS->LocateHandleBuffer (
+                    ByProtocol,
+                    &gEfiPartitionInfoProtocolGuid,
+                    NULL /* SearchKey */,
+                    &HandleCount,
+                    &HandleList
+                    );
+    if (EFI_ERROR (Status)) {
+      DEBUG ((DEBUG_ERROR, "%a: Unable to get EfiPartitionInfoProtocol handles (%r).\r\n", __FUNCTION__, Status));
+    } else {
+      DEBUG ((DEBUG_ERROR, "%a: Found %d EfiPartitionInfoProtocol handles.\r\n", __FUNCTION__, HandleCount));
+      for (i = 0; i < HandleCount; i++) {
+        DEBUG ((DEBUG_ERROR, "%a: Processing EfiPartitionInfoProtocol handle %d: 0x%X\r\n", __FUNCTION__, i, HandleList[i]));
+        Status = gBS->HandleProtocol (
+                        HandleList[i],
+                        &gEfiPartitionInfoProtocolGuid,
+                        (VOID **)&PartitionInfo
+                        );
+
+        if (EFI_ERROR (Status)) {
+          DEBUG ((DEBUG_ERROR, "%a: Unable to get PartitionInfo (%r). Skip.\r\n", __FUNCTION__, Status));
+          continue;
+        }
+        if (PartitionInfo->Type != PARTITION_TYPE_GPT) {
+          DEBUG ((DEBUG_ERROR, "%a: Not a GPT partition. Skip.\r\n", __FUNCTION__));
+          continue;
+        }
+        if (StrCmp (PartitionInfo->Info.Gpt.PartitionName, L"APP") != 0) {
+          DEBUG ((DEBUG_ERROR, "%a: PartitionName '%s', not 'APP'. Skip.\r\n", __FUNCTION__, PartitionInfo->Info.Gpt.PartitionName));
+          continue;
+        }
+
+        DEBUG ((DEBUG_ERROR, "%a: Found 'APP' partition.\r\n", __FUNCTION__));
+
+        Status = gBS->HandleProtocol (
+                        HandleList[i],
+                        &gEfiDiskIoProtocolGuid,
+                        (VOID **)&(Part.DiskIo)
+                        );
+
+        if (EFI_ERROR (Status)) {
+          DEBUG ((DEBUG_ERROR, "%a: Cannot open EfiDiskIoProtocol (%r). Skip.\r\n", __FUNCTION__, Status));
+          continue;
+        }
+
+        DEBUG ((DEBUG_ERROR, "%a: EfiDiskIoProtocol opened.\r\n", __FUNCTION__));
+
+        Status = gBS->HandleProtocol (
+                        HandleList[i],
+                        &gEfiBlockIoProtocolGuid,
+                        (VOID **)&(Part.BlockIo)
+                        );
+
+        if (EFI_ERROR (Status)) {
+          DEBUG ((DEBUG_ERROR, "%a: Cannot open EfiBlockIoProtocol (%r). Skip.\r\n", __FUNCTION__, Status));
+          continue;
+        }
+
+        DEBUG ((DEBUG_ERROR, "%a: EfiBlockIoProtocol opened.\r\n", __FUNCTION__));
+
+        Status = EXT4_DISK_IO ((&Part))->ReadDisk (
+                                     EXT4_DISK_IO ((&Part)),
+                                     EXT4_MEDIA_ID ((&Part)),
+                                     EXT4_SUPERBLOCK_OFFSET,
+                                     sizeof (EXT4_SUPERBLOCK),
+                                     &(Part.SuperBlock)
+                                     );
+
+        DEBUG ((DEBUG_ERROR, "%a: SuperBlock read.\r\n", __FUNCTION__));
+
+        if (EFI_ERROR (Status)) {
+          DEBUG ((DEBUG_ERROR, "%a: Failed to read EXT4 Super Block (%r). Skip.\r\n", __FUNCTION__, Status));
+          continue;
+        }
+
+        if (Part.SuperBlock.s_magic != EXT4_SIGNATURE) {
+          DEBUG ((DEBUG_ERROR, "%a: Invalid EXT4 Super Block magic %x. Expecting %x. Skip.\r\n", __FUNCTION__, Part.SuperBlock.s_magic, EXT4_SIGNATURE));
+          continue;
+        }
+
+        if ((Part.SuperBlock.s_rev_level != EXT4_DYNAMIC_REV) && (Part.SuperBlock.s_rev_level != EXT4_GOOD_OLD_REV)) {
+          DEBUG ((DEBUG_ERROR, "%a: Invalid EXT4 Super Block rev_level %x. Skip.\r\n", __FUNCTION__, Part.SuperBlock.s_rev_level));
+          continue;
+        }
+
+        ErrorPrint (L"%a: Patching root with the first APP partition found.\r\n", __FUNCTION__);
+
+        CHAR16 UniquePartitionGUID[37] = {};
+        DEBUG ((DEBUG_ERROR, "%a: Fix GUID Endianness.\r\n", __FUNCTION__));
+        *((UINT32 *)&Part.SuperBlock.s_uuid[0]) = SwapBytes32 (*((UINT32 *)&Part.SuperBlock.s_uuid[0]));
+        *((UINT16 *)&Part.SuperBlock.s_uuid[4]) = SwapBytes16 (*((UINT16 *)&Part.SuperBlock.s_uuid[4]));
+        *((UINT16 *)&Part.SuperBlock.s_uuid[6]) = SwapBytes16 (*((UINT16 *)&Part.SuperBlock.s_uuid[6]));
+        UnicodeSPrint (UniquePartitionGUID, sizeof (UniquePartitionGUID), L"%g", (VOID *) &Part.SuperBlock.s_uuid);
+
+        for (CHAR16 *TmpStr = UniquePartitionGUID; *TmpStr != L'\0' && TmpStr != &UniquePartitionGUID[36]; TmpStr++) {
+          if ((*TmpStr >= L'A') && (*TmpStr <= L'Z')) {
+            *TmpStr = (CHAR16)(*TmpStr - L'A' + L'a');
+          }
+        }
+
+        ErrorPrint (L"%a: root=UUID=%s\r\n", __FUNCTION__, UniquePartitionGUID);
+
+        // The extra space at the end is necessary for nvresizefs.sh to get full UUID
+        RemoveKernelCommandLine (CmdLine, L"root=/dev/mmcblk");
+        UnicodeSPrint (CmdLine, Length, L"%s root=UUID=%s ", CmdLine, UniquePartitionGUID);
+        break;
+      }
+      if (!(i < HandleCount)) {
+        ErrorPrint (L"%a: No APP partition was found.\r\n", __FUNCTION__);
+        ErrorPrint (L"%a: System may not be bootable!\r\n", __FUNCTION__);
+      }
+      FreePool (HandleList);
+    }
+  }
+
   *OutCmdLine = CmdLine;
   return EFI_SUCCESS;
 }
diff --git a/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/TegraPlatformBootManagerDxe.inf b/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/TegraPlatformBootManagerDxe.inf
index eb627388..4a2316f9 100644
--- a/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/TegraPlatformBootManagerDxe.inf
+++ b/Silicon/NVIDIA/Drivers/TegraPlatformBootManager/TegraPlatformBootManagerDxe.inf
@@ -14,6 +14,8 @@
 
 [Sources.common]
   TegraPlatformBootManagerDxe.c
+  Ext4Dxe/Ext4Disk.h
+  Ext4Dxe/Ext4Dxe.h
 
 [Packages]
   MdeModulePkg/MdeModulePkg.dec
@@ -39,6 +41,8 @@
   gEfiFirmwareVolume2ProtocolGuid
   gEdkiiPlatformBootManagerProtocolGuid
   gAndroidBootImgProtocolGuid
+  gEfiPartitionInfoProtocolGuid
+  gEfiDiskIoProtocolGuid
 
 [Guids]
   gFdtTableGuid
-- 
2.49.0

